{"version":3,"sources":["components/navigation.jsx","components/titleBoard.jsx","components/formComponents/multiSelect.jsx","components/formComponents/woxComponents/woxComponent.jsx","components/formComponents/woxComponents/column.jsx","components/formComponents/woxComponents/woxComponents.jsx","components/formComponents/colorPicker/colorPicker.jsx","components/formComponents/standardElement.jsx","components/formComponents/contentElement/buttonElement.jsx","components/formComponents/importPicture/locationFinder.jsx","components/formComponents/importPicture/pictureUpload.jsx","components/formComponents/importPicture/pictureInsert.jsx","components/formComponents/contentElement/clickPick.jsx","components/formComponents/contentElement/textElement.jsx","components/formComponents/contentElement/pictureFolderElement.jsx","components/formComponents/contentElement/carouselElement.jsx","components/formComponents/contentElement/containerElement.jsx","components/formComponents/contentElement/contentElement.jsx","components/formComponents/formElement.jsx","components/newContentModal.jsx","components/contentTable.jsx","components/dashboard.jsx","components/page.jsx","components/loginModal.jsx","components/connectWithDatabase.jsx","App.js","index.js"],"names":["Navigation","props","setDestinationIndex","destinations","axios","Navbar","collapseOnSelect","expand","bg","variant","sticky","Brand","href","alt","src","width","height","className","Toggle","aria-controls","Collapse","Nav","map","destination","index","current","Dropdown","Item","onSelect","key","title","renderItem","destinationIndex","Text","state","user","Button","inline","onClick","logOut","this","currentPage","onAddNewContent","Container","fluid","Row","Col","xl","lg","md","sm","xs","DropdownButton","id","element","typeOfData","disabled","Component","MultiSelect","myData","options","defaultValue","value","handleChange","event","isMulti","name","onChange","undefined","option","findDefault","findOne","val","find","Array","isArray","single","nextProps","setState","multiple","WoxComponent","getItemStyle","isDragging","draggableStyle","userSelect","padding","grid","margin","borderRadius","border","background","component","onDelete","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","style","size","Column","getListStyle","isDraggingOver","transition","columnwidth","textAlign","column","droppableId","components","woxComponent","placeholder","block","Menu","Header","componentsList","OverlayTrigger","placement","delay","show","hide","overlay","other","Tooltip","toString","description","onAddComponent","WoxComponents","reorder","list","startIndex","endIndex","result","from","splice","removed","move","source","droppableSource","droppableDestination","sourceClone","destClone","handleDelete","columnId","columns","newcomponentIds","componentIds","onDragEnd","items","newcolumns","destinationId","newcolumn","push","woxComponents","layout","newComponents","columnOrder","getColumnOrder","columnWidth","length","compsL","compsM","compsR","prevProps","newComponentPossibilities","concat","componentId","indexOf","ColorPicker","color","getStyle","handleChangeComplete","rgb","r","g","b","rootClose","trigger","Popover","Title","as","Content","disableAlpha","onChangeComplete","presetColors","StandardElement","Form","Control","required","type","inputType","label","currentTarget","ButtonElement","elementData","rest","formType","Label","group","text","target","link","Location","geocoder","L","Geocoder","nominatim","getAnswers","inputValue","Promise","resolve","reject","geocode","results","center","cacheOptions","loadOptions","input","cb","a","defaultOptions","PictureUpload","error","onUpload","Modal","centered","onHide","Alert","initialValues","file","long","lat","locationAdded","onSubmit","values","data","FormData","append","uploadPicture","responce","validationSchema","yup","shape","handleSubmit","setFieldValue","Group","coords","lng","htmlFor","files","PictureInsert","pictureIds","ids","canShow","pictures","componentDidMount","fetchPictures","componentDidUpdate","ConnectWithDatabase","col_filter","pics","picture","handleUploadPic","bind","onAddPicture","newIds","reactions","ClickPick","pictureId","handleAddPicture","newId","sestState","InsertProps","ElementProps","TextElement","spellChecker","PictureFolderElement","locationActive","CarouselElement","customCaption","singleCaption","captions","captionActive","ContainerElement","test","ContentElement","theseprops","FormElement","lists","InputGroup","Prepend","URL","document","origin","getvalue","layoutTypeValue","layouts","columnType","includes","groupElements","formElement","mdSize","getCorrectElement","NewContentModal","cells","currentDestination","newContentList","currentId","handleFormSubmit","onEditContent","typeOfContent","preventDefault","everyElement","newFormElement","JSON","stringify","handleSetStateData","newContent","handleInputChange","currentObject","getCurrentObject","object","newObjectData","setObjectElement","contentType","parse","dataCopy","aria-labelledby","closebutton","Body","Footer","ContentTable","onGetContent","onRemoveContent","tableColumns","dataField","listItem","buttons","ButtonToolbar","expandRow","onlyOneExpanding","renderer","row","rowIndex","bootstrap4","condensed","keyField","pagination","paginationFactory","noDataIndication","Dashboard","pages","users","viewTotal","usersAmount","woxComponentsAmount","pagesAmount","Card","ListGroup","Badge","pill","Page","modalShow","handleGetObjectFromDatabase","objectId","handleRemoveObjectFromDatabase","onRefreshTable","handleEditObjectInDatabase","handleAddObjectToDatabase","handleOpenNewModal","tableData","marginTop","page","LoginModal","email","password","showAlert","onCorrectCredentials","login","loggedIn","AxiosConnection","userRole","config","post","userToken","headers","token","role","connectType","url","console","log","typeFunction","Config","params","filters","get","put","delete","App","fetchViewTotal","views","counter","handleRefreshTableData","col_filters","newTableData","i","Fragment","fetchAllTables","ReactDOM","render","sort","prependUrl","getElementById"],"mappings":"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","file":"static/js/main.f8e4f115.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar, Dropdown, Nav, Button } from \"react-bootstrap\";\n\n/* ------------------------------------------------------------------\nthe navigation bar, when a new \"page\" is opened here, it actually\njust changes the destination Idx so the page renderer knows what to\nrender\n-------------------------------------------------------------------*/\nexport default function Navigation(props) {\n  const { setDestinationIndex, destinations, axios } = props;\n  const renderItem = (destination, index, current) => {\n    return (\n      <Dropdown.Item\n        onSelect={() => setDestinationIndex(index)}\n        key={index}\n        className={index === current ? \"active\" : \"none\"}\n      >\n        {destination.title}\n      </Dropdown.Item>\n    );\n  };\n\n  return (\n    <Navbar\n      collapseOnSelect\n      expand=\"lg\"\n      bg=\"light\"\n      variant=\"light\"\n      sticky=\"top\"\n    >\n      <Navbar.Brand href=\"#home\">\n        <img\n          alt=\"\"\n          src=\"/SmallLogo.ico\"\n          width=\"40\"\n          height=\"30\"\n          className=\"d-inline-block align-top\"\n        />\n        WoxPace\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse>\n        <Nav className=\"mr-auto\">\n          {destinations.map((destination, index) =>\n            renderItem(destination, index, props.destinationIndex)\n          )}\n        </Nav>\n        <Navbar.Text>\n          Welcome, {axios.state.user}{\" \"}\n          <Button\n            inline=\"true\"\n            variant=\"outline-success\"\n            onClick={() => {\n              axios.logOut();\n              setDestinationIndex(0);\n            }}\n          >\n            Log Out\n          </Button>\n        </Navbar.Text>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n","import React, { Component } from \"react\";\nimport { DropdownButton, Dropdown, Container, Row, Col } from \"react-bootstrap\";\n\n/* ------------------------------------------------------------------\n  Gives back the title of the currentPage and the dropdown button of\n  where you can choose what content you want to add\n  -------------------------------------------------------------------*/\nexport default class Navigation extends Component {\n  render() {\n    const { destinations, currentPage, onAddNewContent, axios } = this.props;\n    return (\n      <Container fluid>\n        <Row>\n          <Col xl={10} lg={10} md={9} sm={8} xs={12}>\n            <h1>{currentPage.title}</h1>\n          </Col>\n          <Col xl={2} lg={2} md={3} sm={4} xs={12}>\n            <DropdownButton id=\"dropdown-basic-button\" title=\"Add Content\">\n              {destinations.map(function(element) {\n                if (element.typeOfData !== \"noData\") {\n                  return (\n                    <Dropdown.Item\n                      /* ------------------------------------------------------------------\n                      we ask axios if the current user hase rights to add this type of data\n                      or not.\n                      -------------------------------------------------------------------*/\n                      disabled={axios.disabled(element.typeOfData)}\n                      key={element.typeOfData}\n                      onClick={() => onAddNewContent(element.typeOfData)}\n                    >\n                      {element.typeOfData}\n                    </Dropdown.Item>\n                  );\n                } else return null;\n              })}\n            </DropdownButton>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Select from \"react-select\";\n\n/* ------------------------------------------------------------------\nReact-bootstrap doesn't have the option to have multiple options\nselected in a select. Herefor we use an external library called\nreact-select for all selections.\n-------------------------------------------------------------------*/\nexport default class MultiSelect extends Component {\n  state = {\n    myData: this.props.options,\n    defaultValue: this.props.value\n  };\n  componentDidUpdate(nextProps) {\n    const { options, value } = this.props;\n    if (nextProps !== this.props) {\n      this.setState({ myData: options, defaultValue: value });\n    }\n  }\n\n  /* ------------------------------------------------------------------\n  when something is changed, we have to check whether it is a multi\n  selection component or not. Because when it is. we have to map over it\n  before handing it back to its parent.\n  -------------------------------------------------------------------*/\n  handleChange = event => {\n    const { isMulti, name, onChange } = this.props;\n    let value = event && event.value !== undefined ? event.value : event;\n    if (isMulti && event) value = value.map(option => option.value);\n    onChange({ value: value, name: name });\n  };\n  findDefault = value => {\n    let result = [];\n    const findOne = val =>\n      this.state.myData.find(option => option.value === val);\n    if (Array.isArray(value)) {\n      result = value.map(single => findOne(single));\n    } else result = findOne(value);\n    return result;\n  };\n  render() {\n    const { isMulti, name } = this.props;\n    return (\n      <Select\n        key={name}\n        isMulti={isMulti}\n        value={this.findDefault(this.state.defaultValue)}\n        onChange={this.handleChange}\n        options={this.state.myData}\n        multiple\n      />\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Draggable } from \"react-beautiful-dnd\";\n\nexport default class WoxComponent extends Component {\n  getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: \"none\",\n    padding: this.props.grid * 2,\n    margin: `0 0 ${this.props.grid}px 0`,\n    borderRadius: \"5px\",\n\n    // change background colour if dragging\n    border: \"1px solid darkgrey\",\n    background: isDragging ? \"lightgreen\" : \"lightgrey\",\n\n    // styles we need to apply on draggables\n    ...draggableStyle\n  });\n\n  render() {\n    const { component, index, onDelete } = this.props;\n    return (\n      <Draggable key={component.id} draggableId={component.id} index={index}>\n        {(provided, snapshot) => (\n          <div\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            style={this.getItemStyle(\n              snapshot.isDragging,\n              provided.draggableProps.style\n            )}\n          >\n            <Button variant={\"primary\"} onClick={() => onDelete()} size=\"sm\">\n              🗑\n            </Button>\n            {\"      \"}\n            {this.props.component.title}\n          </div>\n        )}\n      </Draggable>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Col, Dropdown, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport WoxComponent from \"./woxComponent\";\n\nexport default class Column extends Component {\n  state = {\n    grid: 8\n  };\n  getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? \"lightblue\" : \"white\",\n    border: \"1px solid #ced4da\",\n    borderRadius: \"5px\",\n    padding: this.state.grid,\n    transition: \"background-color 0.2s ease\"\n  });\n\n  render() {\n    return (\n      <Col xs lg={this.props.columnwidth}>\n        <p style={{ textAlign: \"center\" }}>{this.props.column.title}</p>\n        <Droppable droppableId={this.props.column.id}>\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              style={this.getListStyle(snapshot.isDraggingOver)}\n            >\n              {this.props.components.map((woxComponent, index) => (\n                <WoxComponent\n                  onDelete={() => this.props.onDelete(index)}\n                  key={woxComponent.id}\n                  component={woxComponent}\n                  index={index}\n                  grid={this.state.grid}\n                />\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n        <Dropdown block=\"true\" variant=\"secondary\" size=\"lg\">\n          <Dropdown.Toggle block=\"true\">Add component</Dropdown.Toggle>\n          <Dropdown.Menu block=\"true\">\n            <Dropdown.Header>Exisiting</Dropdown.Header>\n            {this.props.componentsList.map(component => {\n              return (\n                <OverlayTrigger\n                  key={component.id}\n                  placement=\"right\"\n                  delay={{ show: 250, hide: 400 }}\n                  overlay={props => {\n                    const { show, ...other } = props;\n                    return (\n                      <Tooltip show={props.show.toString()} {...other}>\n                        {component.description}}\n                      </Tooltip>\n                    );\n                  }}\n                >\n                  <Dropdown.Item\n                    style={{ width: \"100%\" }}\n                    key={component.id}\n                    onClick={() =>\n                      this.props.onAddComponent(\n                        component.id,\n                        this.props.column.id\n                      )\n                    }\n                  >\n                    {component.title}\n                  </Dropdown.Item>\n                </OverlayTrigger>\n              );\n            })}\n          </Dropdown.Menu>\n        </Dropdown>\n      </Col>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport Column from \"./column\";\nimport { Row } from \"react-bootstrap\";\n\nexport default class WoxComponents extends Component {\n  constructor(props) {\n    super(props);\n    const { woxComponents, layout } = props;\n    let newComponents = {};\n    woxComponents.map(component => {\n      return (newComponents[component.id] = component);\n    });\n    let columnOrder = this.getColumnOrder(layout);\n    this.state = {\n      columnWidth: 12 / columnOrder.length,\n      components: newComponents,\n      columns: {\n        compsL: {\n          id: \"compsL\",\n          title: \"Left Column\",\n          componentIds: this.props.compsL\n        },\n        compsM: {\n          id: \"compsM\",\n          title: \"Center Column\",\n          componentIds: this.props.compsM\n        },\n        compsR: {\n          id: \"compsR\",\n          title: \"Right Column\",\n          componentIds: this.props.compsR\n        }\n      },\n      columnOrder: columnOrder\n    };\n  }\n  componentDidUpdate(prevProps) {\n    const { layout } = this.props;\n    if (layout !== prevProps.layout) {\n      this.setState({ columnOrder: this.getColumnOrder(layout) });\n    }\n  }\n  getColumnOrder(layout) {\n    let columnOrder = [];\n    switch (layout) {\n      case \"single\":\n        columnOrder = [\"compsM\"];\n        break;\n      case \"small-left\":\n        columnOrder = [\"compsL\", \"compsM\"];\n        break;\n      case \"small-right\":\n        columnOrder = [\"compsM\", \"compsR\"];\n        break;\n      default:\n        columnOrder = [\"compsL\", \"compsM\", \"compsR\"];\n    }\n    return columnOrder;\n  }\n  componentDidMount() {\n    const { woxComponents } = this.props;\n    let newComponents = {};\n    woxComponents.map(component => {\n      return (newComponents[component.id] = component);\n    });\n    this.setState({ components: newComponents });\n  }\n  reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n  };\n\n  move = (source, destination, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n  };\n  handleDelete = (index, columnId) => {\n    const { columns } = this.state;\n    const newcomponentIds = columns[columnId].componentIds;\n    newcomponentIds.splice(index, 1);\n    columns[columnId].componentIds = newcomponentIds;\n    this.setState({ columns: columns });\n    this.props.onChange({\n      name: columnId,\n      value: columns[columnId].componentIds\n    });\n  };\n\n  onDragEnd = result => {\n    const { destination, source } = result;\n\n    if (!destination) {\n      return;\n    }\n    if (source.droppableId === destination.droppableId) {\n      const items = this.reorder(\n        this.state.columns[source.droppableId].componentIds,\n        source.index,\n        destination.index\n      );\n      let newcolumns = this.state.columns;\n      newcolumns[destination.droppableId].componentIds = items;\n      this.props.onChange({\n        name: newcolumns[destination.droppableId].id,\n        value: items\n      });\n      this.setState({ columns: newcolumns });\n    } else {\n      const result = this.move(\n        this.state.columns[source.droppableId].componentIds,\n        this.state.columns[destination.droppableId].componentIds,\n        source,\n        destination\n      );\n      let newcolumns = this.state.columns;\n      newcolumns[destination.droppableId].componentIds =\n        result[destination.droppableId];\n      newcolumns[source.droppableId].componentIds = result[source.droppableId];\n      this.props.onChange({\n        name: newcolumns[destination.droppableId].id,\n        value: result[destination.droppableId]\n      });\n      this.props.onChange({\n        name: newcolumns[source.droppableId].id,\n        value: result[source.droppableId]\n      });\n      this.setState({ columns: newcolumns });\n    }\n  };\n\n  onAddComponent = (id, destinationId) => {\n    const newcolumns = this.state.columns;\n    const newcolumn = newcolumns[destinationId];\n    newcolumn.componentIds.push(id);\n    this.props.onChange({ name: destinationId, value: newcolumn.componentIds });\n    this.setState({ columns: newcolumns });\n  };\n  render() {\n    let newComponentPossibilities = [].concat(this.props.woxComponents);\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Row>\n          {this.state.columnOrder.map(columnId => {\n            const column = this.state.columns[columnId];\n            const components = column.componentIds.map(componentId => {\n              let index = newComponentPossibilities.indexOf(\n                this.state.components[componentId]\n              );\n              if (index > -1) {\n                newComponentPossibilities.splice(index, 1);\n              }\n              return this.state.components[componentId];\n            });\n\n            return (\n              <Column\n                width={this.state.columnWidth}\n                onDelete={index => this.handleDelete(index, columnId)}\n                key={column.id}\n                column={column}\n                onAddComponent={this.onAddComponent}\n                components={components}\n                componentsList={newComponentPossibilities}\n              />\n            );\n          })}\n        </Row>\n      </DragDropContext>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { SketchPicker } from \"react-color\";\nimport { OverlayTrigger, Popover } from \"react-bootstrap\";\n\n/* ------------------------------------------------------------------\nA color picker to choose the background for the layout. This uses an\nexternal library called react-color for the color picker itself. \nBut because this is a pretty bulky picker, it is hidden behind an\npopover.\n-------------------------------------------------------------------*/\nexport default class ColorPicker extends Component {\n  state = {\n    color: this.props.color\n  };\n  getStyle = () => ({\n    //width: \"20%\",\n    height: \"38px\",\n    background: this.state.color,\n    border: \"1px solid #ced4da\",\n    borderRadius: \"5px\"\n    //marginTop: \"32px\"\n  });\n\n  handleChangeComplete = color => {\n    this.setState({\n      color: `rgb(${color.rgb.r}, ${color.rgb.g}, ${color.rgb.b})`\n    });\n    this.props.onChange({ value: this.state.color, name: \"backgroundColor\" });\n  };\n\n  render() {\n    return (\n      <OverlayTrigger\n        rootClose\n        trigger=\"click\"\n        key=\"test\"\n        placement=\"bottom\"\n        overlay={\n          <Popover id={`popover-positioned`}>\n            <Popover.Title as=\"h3\">Choose Color</Popover.Title>\n            <Popover.Content>\n              <SketchPicker\n                disableAlpha\n                color={this.state.color}\n                onChangeComplete={this.handleChangeComplete}\n                presetColors={[\n                  \"#f44336\",\n                  \"#e91e63\",\n                  \"#9c27b0\",\n                  \"#673ab7\",\n                  \"#3f51b5\",\n                  \"#2196f3\",\n                  \"#00bcd4\",\n                  \"#009688\",\n                  \"#4caf50\",\n                  \"#8bc34a\",\n                  \"#cddc39\",\n                  \"#ffeb3b\",\n                  \"#ffc107\",\n                  \"#ff9800\",\n                  \"#ff5722\",\n                  \"#607d8b\"\n                ]}\n              />\n            </Popover.Content>\n          </Popover>\n        }\n      >\n        <div style={this.getStyle()}></div>\n      </OverlayTrigger>\n    );\n    //return ;\n  }\n}\n","import React from \"react\";\nimport { Form } from \"react-bootstrap\";\n\n/* ------------------------------------------------------------------\n  Pretty mutch just a regular Form.Control \n  -------------------------------------------------------------------*/\nexport default function StandardElement(props) {\n  const { element, value, onChange } = props;\n  return (\n    <Form.Control\n      required\n      disabled={element.disabled ? true : false}\n      type={element.inputType}\n      name={element.key}\n      placeholder={element.label}\n      onChange={event => onChange(event.currentTarget)}\n      key={element.key}\n      defaultValue={value}\n    ></Form.Control>\n  );\n}\n","import React from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport StandardElement from \"../standardElement\";\n\n/* ------------------------------------------------------------------\na simple button, this only needs 2 standardElements, the text wich\nwe want displayed on the button and the link it referes to.\n-------------------------------------------------------------------*/\nexport default function ButtonElement(props) {\n  const { onChange, element, elementData } = props;\n  const { label, ...rest } = element;\n  rest.formType = \"text\";\n  return (\n    <Form.Row key={\"Row\" + element.key}>\n      <Form.Label>Text</Form.Label>\n      <StandardElement\n        element={{ label: \"buttonText\", ...rest }}\n        group={true}\n        value={elementData.text}\n        onChange={target =>\n          onChange({ text: target.value, link: elementData.value })\n        }\n      />\n      <Form.Label>Link</Form.Label>\n      <StandardElement\n        element={{ label: \"buttonLink\", ...rest }}\n        group={true}\n        value={elementData.link}\n        onChange={target =>\n          onChange({\n            value: { link: target.value, text: elementData.text },\n            name: target.name\n          })\n        }\n      />\n    </Form.Row>\n  );\n}\n","import React from \"react\";\nimport AsyncSelect from \"react-select/async\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport \"leaflet-control-geocoder\";\n\n/* ------------------------------------------------------------------\nLocation gets a string and searches via the Leaflet api to a location\nwich corresponds to the given string. It gives back the long and lat\nof the location\n-------------------------------------------------------------------*/\nexport default function Location(props) {\n  const geocoder = L.Control.Geocoder.nominatim();\n  const getAnswers = inputValue => {\n    return new Promise((resolve, reject) => {\n      geocoder.geocode(inputValue, results => {\n        // The required attribute for the results is a label which is displayed as search options\n        resolve(\n          results.map(result => ({ label: result.name, value: result.center }))\n        );\n      });\n    });\n  };\n  const handleChange = event => {\n    const { onChange } = props;\n    let value = event && event.value !== undefined ? event.value : event;\n    onChange(value);\n  };\n  return (\n    <AsyncSelect\n      cacheOptions\n      onChange={handleChange}\n      // cb is callback which is applied to results once they're loaded\n      loadOptions={async (input, cb) => cb(await getAnswers(input))}\n      defaultOptions\n    />\n  );\n}\n","import React, { Component } from \"react\";\nimport { Form, Button, Container, Modal, Alert } from \"react-bootstrap\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport Location from \"./locationFinder\";\n\n/* ------------------------------------------------------------------\nA formik form wich wraped in a modal wich will on submit try to \nupload the given file(picture). The form has a locationAdded attribute\nso it knows if it should give back the long and lat \n-------------------------------------------------------------------*/\nexport default class PictureUpload extends Component {\n  state = {\n    show: false,\n    error: false\n  };\n  render() {\n    const { axios, onUpload } = this.props;\n    return (\n      <div>\n        <Button onClick={() => this.setState({ show: true })}>\n          Upload Picture\n        </Button>\n        <Modal\n          centered\n          show={this.state.show}\n          onHide={() => this.setState({ show: false })}\n        >\n          <Alert\n            show={this.state.error ? true : false}\n            key=\"incorrect\"\n            variant=\"danger\"\n          >\n            {this.state.error}\n          </Alert>\n          <Formik\n            initialValues={{\n              file: null,\n              title: \"\",\n              long: 0,\n              lat: 0,\n              locationAdded: false\n            }}\n            onSubmit={async values => {\n              let data = new FormData();\n              data.append(\"image\", values.file);\n              data.append(\"title\", values.title);\n              if (values.locationAdded) {\n                data.append(\"long\", values.long);\n                data.append(\"lat\", values.lat);\n              }\n              let responce = await axios.uploadPicture(\"post\", data);\n              if (responce.error) {\n                this.setState({ error: responce.error });\n              } else {\n                this.setState({ show: false });\n                onUpload(responce.id);\n              }\n            }}\n            validationSchema={yup.object().shape({\n              file: yup.mixed().required()\n            })}\n          >\n            {({ handleSubmit, values, setFieldValue }) => {\n              return (\n                <Container>\n                  <Form onSubmit={handleSubmit}>\n                    <Form.Group>\n                      <Form.Label>Title</Form.Label>\n                      <Form.Control\n                        required\n                        onChange={event => {\n                          this.setState({ error: false });\n                          setFieldValue(\"title\", event.currentTarget.value);\n                        }}\n                      />\n                    </Form.Group>\n                    <Form.Group>\n                      <Form.Label>Location</Form.Label>\n                      <Location\n                        onChange={coords => {\n                          this.setState({ error: false });\n                          setFieldValue(\"locationAdded\", true);\n                          setFieldValue(\"long\", coords.lng);\n                          setFieldValue(\"lat\", coords.lat);\n                        }}\n                      />\n                    </Form.Group>\n                    <Form.Group>\n                      <Form.Label htmlFor=\"file\">Upload Picture</Form.Label>\n                      <input\n                        id=\"file\"\n                        name=\"file\"\n                        type=\"file\"\n                        onChange={event => {\n                          this.setState({ error: false });\n                          setFieldValue(\"file\", event.currentTarget.files[0]);\n                        }}\n                        className=\"form-control\"\n                      />\n                    </Form.Group>\n                    <Button type=\"submit\">Upload</Button>\n                  </Form>\n                </Container>\n              );\n            }}\n          </Formik>\n        </Modal>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport PictureUpload from \"./pictureUpload\";\nimport MultiSelect from \"./../multiSelect\";\nimport { Form } from \"react-bootstrap\";\n\n/* ------------------------------------------------------------------\nSince multiple components need a way to insert pictures this is a\nwrapper around all the important functions needed to let pictureUpload\nfunction smoothly (and show the ids correctly). Currently though there\nis no way for a picture to be removed from the database. This is for\na future project.\n-------------------------------------------------------------------*/\nexport default class PictureInsert extends Component {\n  constructor(props) {\n    super(props);\n    this.handleUploadPic = this.handleUploadPic.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  state = {\n    pictureIds: this.props.elementData.ids,\n    canShow: false,\n    pictures: []\n  };\n\n  /* ------------------------------------------------------------------\n  we first fetch the already existing pictures so we don't actually have\n  to upload a picture if its already in the database.\n  -------------------------------------------------------------------*/\n  componentDidMount = async () => {\n    const { elementData } = this.props;\n    this.setState({\n      pictureIds: elementData.ids,\n      pictures: await this.fetchPictures(),\n      canShow: true\n    });\n  };\n\n  /* ------------------------------------------------------------------\n  everytime we have a pictureId added to our elementData(by upload or not),\n  we want to refetch all the pictures from the database \n  -------------------------------------------------------------------*/\n  componentDidUpdate = async nextProps => {\n    const { elementData } = this.props;\n    if (nextProps.elementData !== elementData) {\n      this.setState({\n        pictureIds: elementData.ids,\n        pictures: await this.fetchPictures()\n      });\n    }\n  };\n\n  /* ------------------------------------------------------------------\n  the actual procedure to fetch the pictures from the database.\n  -------------------------------------------------------------------*/\n  fetchPictures = async () => {\n    const { axios } = this.props;\n    let pics = await axios.ConnectWithDatabase(\"get\", \"image\", {\n      col_filter: [\"title\", \"id\"]\n    });\n    pics = pics.map(picture => {\n      return { label: picture.title, value: picture.id };\n    });\n    return pics;\n  };\n\n  /* ------------------------------------------------------------------\n  when a picture is uploaded we want it to be added to the id list\n  -------------------------------------------------------------------*/\n  handleUploadPic(id) {\n    const { onAddPicture, isMulti } = this.props;\n    const newIds = this.state.pictureIds ? this.state.pictureIds : [];\n    if (isMulti) newIds.push(id);\n    onAddPicture(newIds);\n  }\n\n  handleChange(reactions) {\n    const { onAddPicture } = this.props;\n    this.setState({\n      pictureIds: reactions.value\n    });\n    onAddPicture(reactions.value);\n  }\n  render() {\n    const { axios } = this.props;\n    if (this.state.canShow) {\n      return (\n        <div>\n          <Form.Label>Insert Picture</Form.Label>\n          <MultiSelect\n            key={\"picture\"}\n            name={\"pictures\"}\n            onChange={this.handleChange}\n            value={this.state.pictureIds}\n            options={this.state.pictures}\n            isMulti={this.props.isMulti}\n          />\n          <PictureUpload onUpload={this.handleUploadPic} axios={axios} />\n        </div>\n      );\n    } else return null;\n  }\n}\n","import React, { Component } from \"react\";\nimport StandardElement from \"../standardElement\";\nimport PictureInsert from \"./../importPicture/pictureInsert\";\nimport { Form } from \"react-bootstrap\";\n\n/* ------------------------------------------------------------------\nA clickable picture component, This consists of a Link wich is \nrendered with a StandardElement and a picture id wich is gotten by\nPictureInsert\n-------------------------------------------------------------------*/\nexport default class ClickPick extends Component {\n  constructor(props) {\n    super(props);\n    this.handleAddPicture = this.handleAddPicture.bind(this);\n  }\n  state = {\n    pictureId: this.props.elementData.id,\n    link: this.props.elementData.link\n  };\n\n  handleAddPicture(newId) {\n    const { onChange } = this.props;\n    this.sestState = { pictureId: newId };\n    onChange({ link: this.state.link, id: newId });\n  }\n\n  render() {\n    const { element, onChange } = this.props;\n    const { elementData, ...InsertProps } = this.props;\n    const { label, ...ElementProps } = element;\n    return (\n      <div key={\"Row\" + element.key}>\n        <Form.Label>Link</Form.Label>\n        <StandardElement\n          element={{ label: \"Link\", ...ElementProps }}\n          group={true}\n          value={elementData.link}\n          onChange={target => {\n            this.setState({ link: target.value });\n            onChange({\n              value: { link: target.value, id: this.state.pictureId },\n              name: target.name\n            });\n          }}\n        />\n        <PictureInsert\n          isMulti={false}\n          onAddPicture={this.handleAddPicture}\n          elementData={{ ids: this.state.pictureId }}\n          {...InsertProps}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport SimpleMDE from \"react-simplemde-editor\";\nimport \"easymde/dist/easymde.min.css\";\nimport \"./simplemde.css\";\n\n/* ------------------------------------------------------------------\nThe text element uses an external library called react-simplemde-editor.\nThis is simply a text field with some markdown markup.\n-------------------------------------------------------------------*/\nexport default function TextElement(props) {\n  return <SimpleMDE {...props} options={{ spellChecker: false }} />;\n}\n","import React, { Component } from \"react\";\nimport PictureInsert from \"./../importPicture/pictureInsert\";\n\n/* ------------------------------------------------------------------\nA pictureFolderElement is pretty mutch the same as the carrouselElement.\nBut on the front-end it will display the pictures in a folder instead\nof in a carrousel. We now have the attribute locationActive wich is just\ngiven back as true because we want it to always give back the location.\nWe could make the user easily choose for himself if the location should\nbe active or not. But we chose not to.\n-------------------------------------------------------------------*/\nexport default class PictureFolderElement extends Component {\n  constructor(props) {\n    super(props);\n    this.handleAddPicture = this.handleAddPicture.bind(this);\n  }\n  handleAddPicture(newIds) {\n    const { onChange } = this.props;\n    onChange({\n      locationActive: true,\n      ids: newIds\n    });\n  }\n  render() {\n    return (\n      <PictureInsert\n        isMulti={true}\n        onAddPicture={this.handleAddPicture}\n        {...this.props}\n      />\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport PictureInsert from \"../importPicture/pictureInsert\";\n\n/* ------------------------------------------------------------------\n  the captions are not fully implemented yet because they wouldn't really\n  fit the aestethics we where looking for. Yet these could easily be \n  added since the front and back-end are almost completely done.\n  For now we just give back false for all the caption related attributes.\n  The Ids list is created by PictureInsert\n  -------------------------------------------------------------------*/\nexport default class CarouselElement extends Component {\n  constructor(props) {\n    super(props);\n    this.handleAddPicture = this.handleAddPicture.bind(this);\n  }\n  handleAddPicture(newIds) {\n    const { onChange } = this.props;\n    onChange({\n      customCaption: false,\n      singleCaption: false,\n      captions: false,\n      captionActive: false,\n      ids: newIds\n    });\n  }\n  render() {\n    return (\n      <PictureInsert\n        isMulti={true}\n        onAddPicture={this.handleAddPicture}\n        {...this.props}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport WoxComponents from \"./../woxComponents/woxComponents\";\n\n/* ------------------------------------------------------------------\n  An Element wich can contain multiple components these will be displayed\n  horizontaly from left to right. In the future we would also like to \n  display them from top to bottom (for nested containers), but for \n  now (although it probably wouldn't be that hard to implement) this\n  feature still isn't implemented yet.\n  -------------------------------------------------------------------*/\nexport default function ContainerElement(props) {\n  const { elementData, woxComponents, onChange } = props;\n  return (\n    <WoxComponents\n      key={\"components\"}\n      layout=\"single\"\n      compsM={elementData.ids ? elementData.ids : []}\n      woxComponents={woxComponents}\n      onChange={test => {\n        onChange({ ids: test.value });\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport ButtonElement from \"./buttonElement\";\nimport ClickPick from \"./clickPick\";\nimport TextElement from \"./textElement\";\nimport PictureFolderElement from \"./pictureFolderElement\";\nimport CarouselElement from \"./carouselElement\";\nimport ContainerElement from \"./containerElement\";\n\n/* ------------------------------------------------------------------\nWhen a contentElement is added we have to determine which kind of\ncontent Element we want displayed. This is chosen by the type prop.\ncontentElement is just a big switch case on the type to give back\nthe correct Element\n-------------------------------------------------------------------*/\nexport default function ContentElement(props) {\n  let theseprops = { ...props };\n  theseprops.onChange = value => {\n    props.onChange({ value: value, name: \"content\" });\n  };\n  const { onChange, type, elementData } = theseprops;\n  switch (type) {\n    case \"text\":\n      return (\n        <TextElement\n          value={elementData.text}\n          onChange={text => onChange({ text: text })}\n        />\n      );\n    case \"button\":\n      return <ButtonElement {...theseprops} />;\n    case \"container\":\n      return <ContainerElement {...theseprops} />;\n    case \"clickablePicture\":\n      return <ClickPick {...theseprops} />;\n    case \"pictureFolder\":\n      return <PictureFolderElement {...theseprops} />;\n    case \"carousel\":\n      return <CarouselElement {...theseprops} />;\n    default:\n      return <h1>Not supported yet</h1>;\n  }\n}\n","import React, { Component } from \"react\";\nimport { Form, Col, InputGroup } from \"react-bootstrap\";\nimport MultiSelect from \"./multiSelect\";\nimport WoxComponents from \"./woxComponents/woxComponents\";\nimport ColorPicker from \"./colorPicker/colorPicker\";\nimport StandardElement from \"./standardElement\";\nimport ContentElement from \"./contentElement/contentElement\";\nimport PictureInsert from \"./importPicture/pictureInsert\";\n\nexport default class FormElement extends Component {\n  /* ------------------------------------------------------------------\n  gets the value responding to the elment given. Usualy this just means\n  giving back the element from data, but whene the data is an object, \n  the correct attribute of the objects needs to be given back\n  -------------------------------------------------------------------*/\n  getvalue(element) {\n    const { data } = this.props;\n    if (typeof data[element.key] === \"object\") {\n      //special cases:\n      if (element.key === \"pages\") {\n        return data[element.key].toString();\n      } else if (element.key === \"content\") {\n        return data[element.key].text;\n      } else if (element.formType === \"multiselect\") {\n        return data[element.key];\n      } else return data[element.key].id;\n    } else return data[element.key];\n  }\n\n  /* ------------------------------------------------------------------\n  fetches the correct form Element. This procedure checks if the element\n  hase some special properties, and if so gives back the correct formElement\n  when it is no special case, it gives back a standardElement. More in\n  detail about every element in its corresponding file\n  -------------------------------------------------------------------*/\n  getCorrectElement() {\n    const { group, element, ...rest } = this.props;\n    const { lists, onChange, data, axios } = rest;\n    if (element.key === \"backgroundColor\") {\n      return (\n        <ColorPicker\n          key={element.label}\n          onChange={onChange}\n          color={data[element.key]}\n        />\n      );\n    } else if (element.key === \"url\") {\n      /* ------------------------------------------------------------------\n      the URL doesn't have its own special Element, but this needs to get\n      prepended by the already existing URL.\n      -------------------------------------------------------------------*/\n      return (\n        <InputGroup>\n          <InputGroup.Prepend>\n            <InputGroup.Text>\n              {new URL(document.URL).origin + \"/\"}\n            </InputGroup.Text>\n          </InputGroup.Prepend>\n          <StandardElement\n            key={element.label}\n            element={element}\n            value={this.getvalue(element)}\n            onChange={onChange}\n          />\n        </InputGroup>\n      );\n    } else if (element.key === \"comps\") {\n      /* ------------------------------------------------------------------\n      we search in the layouts list for the correct layout. Here we take\n      the column type to give this to the WoxComponents to know how many\n      columns it has to display\n      -------------------------------------------------------------------*/\n      let layoutTypeValue = \"\";\n      this.props.lists.layouts.map(option => {\n        if (option.id === data.layout) layoutTypeValue = option.columnType;\n        return null;\n      });\n      return (\n        <WoxComponents\n          key={element.label}\n          layout={layoutTypeValue}\n          compsL={data.compsL}\n          compsM={data.compsM}\n          compsR={data.compsR}\n          woxComponents={lists[element.options]}\n          onChange={onChange}\n        />\n      );\n    } else if (element.key === \"content\") {\n      return (\n        <ContentElement\n          key={element.label}\n          axios={axios}\n          element={element}\n          woxComponents={lists.woxComponents}\n          elementData={data[element.key]}\n          type={data.type}\n          onChange={onChange}\n        />\n      );\n    } else if (element.formType.includes(\"select\")) {\n      /* ------------------------------------------------------------------\n      we check if the options are already given in array form or not, when\n      they are not, the string that is given to the element.options is the\n      key for in the lists so we know what list we have to use. It has to\n      be mapped becuse its not in the correct format for the MultiSelect to use\n      -------------------------------------------------------------------*/\n      let options = Array.isArray(element.options)\n        ? element.options\n        : lists[element.options].map(option => ({\n            value: option.id,\n            label: option.title\n          }));\n      return (\n        <MultiSelect\n          key={element.label}\n          name={element.key}\n          onChange={onChange}\n          value={this.getvalue(element)}\n          options={options}\n          isMulti={element.formType === \"select\" ? false : true}\n        />\n      );\n    } else if (element.formType === \"picture\") {\n      return (\n        <PictureInsert\n          isMulti={false}\n          onAddPicture={newId => onChange({ name: element.key, value: newId })}\n          elementData={{ ids: data[element.key] }}\n          axios={axios}\n        />\n      );\n    } else {\n      return (\n        <StandardElement\n          key={element.label}\n          element={element}\n          value={this.getvalue(element)}\n          onChange={onChange}\n        />\n      );\n    }\n  }\n  render() {\n    const { group, element, ...rest } = this.props;\n    if (element.group) {\n      /* ------------------------------------------------------------------\n      when the element is group, it will render al its children in columns\n      instead of rows.\n      -------------------------------------------------------------------*/\n      return (\n        <Form.Row key={\"Row\" + element.groupElements[0].key}>\n          {element.groupElements.map(formElement => (\n            <FormElement\n              key={formElement.key}\n              element={formElement}\n              group={true}\n              {...rest}\n            />\n          ))}\n        </Form.Row>\n      );\n    } else\n      return (\n        <Form.Group\n          key={element.key}\n          as={group ? Col : undefined}\n          md={group ? element.mdSize : 12}\n        >\n          {element.label ? <Form.Label>{element.label}</Form.Label> : null}\n          {this.getCorrectElement()}\n        </Form.Group>\n      );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Modal, Button, Form, Alert } from \"react-bootstrap\";\nimport FormElement from \"./formComponents/formElement\";\n\n/* ------------------------------------------------------------------\nthe modal that gets opened when some content gets eddited or added\n-------------------------------------------------------------------*/\nexport default class NewContentModal extends Component {\n  constructor(props) {\n    super(props);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSetStateData = this.handleSetStateData.bind(this);\n  }\n  state = {\n    canShow: false,\n    cells: [],\n    currentDestination: {},\n    newContentList: [],\n    currentId: 0,\n    data: {},\n    error: false\n  };\n\n  /* ------------------------------------------------------------------\n  everytime the components gets updated it checks if the show prop has\n  changed, only when it has. It will do something. When it gets set to\n  \"edit\" or \"new\" the data gets set to the current object and canShow\n  gets set to true. This means that it is possible for the render to\n  rerender.\n  -------------------------------------------------------------------*/\n  componentDidUpdate(nextProps) {\n    const { show, currentObject, destinations, typeOfContent } = this.props;\n    if (nextProps.show !== show) {\n      if (show) {\n        let currentDestination = {};\n        destinations.map(element => {\n          if (typeOfContent === element.typeOfData)\n            currentDestination = element;\n          return null;\n        });\n        this.setState({\n          currentDestination: currentDestination,\n          data: this.getCurrentObject(currentObject, show, currentDestination),\n          canShow: true\n        });\n      } else this.setState({ data: {}, canShow: false });\n    }\n  }\n\n  /* ------------------------------------------------------------------\n  If the show is set tot \"edit\", we parse the correct data en set the\n  object to a usabe one. Otherwise when its \"new\" it will create a new\n  empty object. It looks at all special cases and handles them all\n  in the correct way.\n  -------------------------------------------------------------------*/\n  getCurrentObject(object, show, destination) {\n    let newObjectData = {};\n    if (show === \"Edit\") {\n      this.setState({ currentId: object.id });\n    }\n    const setObjectElement = element => {\n      if (element.group) {\n        element.groupElements.map(formElement => setObjectElement(formElement));\n      } else if (element.contentType === \"list\") {\n        newObjectData[element.key] =\n          show === \"Edit\" ? JSON.parse(object[element.key]) : [];\n      } else if (element.key === \"comps\") {\n        const { compsL, compsM, compsR } = this.props.currentObject;\n        newObjectData.compsL = show === \"Edit\" ? JSON.parse(compsL) : [];\n        newObjectData.compsM = show === \"Edit\" ? JSON.parse(compsM) : [];\n        newObjectData.compsR = show === \"Edit\" ? JSON.parse(compsR) : [];\n      } else if (Array.isArray(element.options)) {\n        newObjectData[element.key] =\n          show === \"Edit\" ? object[element.key] : element.options[0].value;\n      } else if (element.formType === \"multiselect\") {\n        newObjectData[element.key] =\n          show === \"Edit\" ? JSON.parse(object[element.key]) : [];\n      } else if (element.contentType === \"object\") {\n        newObjectData[element.key] =\n          show === \"Edit\" ? JSON.parse(object[element.key]) : {};\n      } else if (element.options) {\n        newObjectData[element.key] =\n          show === \"Edit\"\n            ? object[element.key]\n            : this.props.lists[element.options][0].id;\n      } else {\n        newObjectData[element.key] = show === \"Edit\" ? object[element.key] : \"\";\n      }\n    };\n    destination.newContent.map(setObjectElement);\n    return newObjectData;\n  }\n\n  /* ------------------------------------------------------------------\n  when the input of an Element gets changed, it updates the data aswell\n  -------------------------------------------------------------------*/\n  handleInputChange(target) {\n    let value = target.value;\n    const name = target.name;\n    this.setState({ error: false });\n    this.handleSetStateData(name, value);\n  }\n\n  /* ------------------------------------------------------------------\n  simply sets the attribute of name \"name\" to value \"value\" of the data\n  object in state\n  -------------------------------------------------------------------*/\n  handleSetStateData(name, value) {\n    let dataCopy = this.state.data;\n    dataCopy[name] = value;\n    this.setState({ data: dataCopy });\n  }\n\n  /* ------------------------------------------------------------------\n  When a form is submitted, all the objects and arrays need to be \n  stringified first. When its submitted it checks whether the backend\n  has given back an error or not. If it has, it sets error to said\n  error so the Alert knows what error to display\n  -------------------------------------------------------------------*/\n  handleFormSubmit = async event => {\n    const { onAddNewContent, onEditContent, typeOfContent, show } = this.props;\n    const { currentDestination, data, currentId } = this.state;\n    event.preventDefault();\n    const everyElement = element => {\n      if (element.group) {\n        element.groupElements.map(formElement => everyElement(formElement));\n      } else if (typeof data[element.key] === \"object\") {\n        let newFormElement = JSON.stringify(data[element.key]);\n        this.handleSetStateData(element.key, newFormElement);\n      } else if (element.key === \"comps\") {\n        this.handleSetStateData(\n          \"compsL\",\n          JSON.stringify(this.state.data.compsL)\n        );\n        this.handleSetStateData(\n          \"compsM\",\n          JSON.stringify(this.state.data.compsM)\n        );\n        this.handleSetStateData(\n          \"compsR\",\n          JSON.stringify(this.state.data.compsR)\n        );\n      }\n      return null;\n    };\n    currentDestination.newContent.map(everyElement);\n    let responce = \"\";\n    if (show === \"New\") responce = await onAddNewContent(data, typeOfContent);\n    else if (show === \"Edit\")\n      responce = await onEditContent(data, currentId, typeOfContent);\n    if (responce.error) this.setState({ error: responce.error });\n  };\n\n  render() {\n    const { show, onHide, typeOfContent } = this.props;\n    if (show && this.state.canShow)\n      return (\n        <Modal\n          key={\"modal\"}\n          show={show === false ? false : true}\n          onHide={onHide}\n          size=\"xl\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Alert\n            /* ------------------------------------------------------------------\n            only shows when an error has occured\n            -------------------------------------------------------------------*/\n            show={this.state.error ? true : false}\n            key=\"incorrect\"\n            variant=\"danger\"\n          >\n            {this.state.error}\n          </Alert>\n          <Modal.Header closebutton=\"true\">\n            <Modal.Title id=\"insert new content\">\n              {show} {typeOfContent}\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form onSubmit={event => this.handleFormSubmit(event)}>\n              {this.state.currentDestination.newContent.map(element => (\n                <FormElement\n                  axios={this.props.axios}\n                  key={element.key}\n                  data={this.state.data}\n                  element={element}\n                  lists={this.props.lists}\n                  onChange={this.handleInputChange}\n                />\n              ))}\n              <Button type=\"submit\">Submit</Button>\n            </Form>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={onHide}>Close</Button>\n          </Modal.Footer>\n        </Modal>\n      );\n    else return null;\n  }\n}\n","import React, { Component } from \"react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { Button, ButtonToolbar } from \"react-bootstrap\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\n\n/* ------------------------------------------------------------------\na table in wich all information about a list of data resigns. \n-------------------------------------------------------------------*/\nclass ContentTable extends Component {\n  render() {\n    let {\n      list,\n      onGetContent,\n      onRemoveContent,\n      currentPage,\n      axios\n    } = this.props;\n    /* ------------------------------------------------------------------\n    two buttons get added to every entry in the table. One to edit the \n    entry and one to remove it.\n    -------------------------------------------------------------------*/\n    let columns = [\n      ...currentPage.tableColumns,\n      { dataField: \"buttons\", text: \" \" }\n    ];\n    list.map(\n      listItem =>\n        (listItem.buttons = (\n          <ButtonToolbar>\n            <Button\n              disabled={axios.disabled(currentPage.typeOfData)}\n              variant=\"warning\"\n              onClick={() => onGetContent(listItem.id)}\n            >\n              Edit\n            </Button>\n            <Button\n              variant={\n                listItem.id === \"Default\" ||\n                listItem.id === \"admin\" ||\n                axios.disabled(currentPage.typeOfData)\n                  ? \"secondary\"\n                  : \"danger\"\n              }\n              disabled={\n                listItem.id === \"Default\" ||\n                listItem.id === \"admin\" ||\n                axios.disabled(currentPage.typeOfData)\n                  ? true\n                  : false\n              }\n              onClick={() => onRemoveContent(listItem.id)}\n            >\n              🗑\n            </Button>\n          </ButtonToolbar>\n        ))\n    );\n    const expandRow = {\n      onlyOneExpanding: true,\n      renderer: (row, rowIndex) => (\n        <div>\n          <h3>About this component:</h3>\n          <p>{row.description}</p>\n        </div>\n      )\n    };\n    return (\n      <div>\n        <BootstrapTable\n          bootstrap4\n          condensed\n          expandRow={expandRow}\n          keyField=\"id\"\n          data={list}\n          columns={columns}\n          pagination={paginationFactory()}\n          noDataIndication={() => <h1>Sorry nothing to see here</h1>}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ContentTable;\n","import React from \"react\";\nimport { Card, ListGroup, Badge } from \"react-bootstrap\";\n\n/* ------------------------------------------------------------------\na simple card with some basic information about the website\n-------------------------------------------------------------------*/\nexport default function Dashboard(props) {\n  const { user, pages, woxComponents, users, viewTotal } = props;\n  let usersAmount = users ? users.length : 0;\n  let woxComponentsAmount = woxComponents ? woxComponents.length : 0;\n  let pagesAmount = pages ? pages.length : 0;\n  return (\n    <Card>\n      <Card.Header>\n        Welcome to your dashboard\n        <b> {user}</b>,\n        <br />\n        Here you can find some statistics about your website.\n      </Card.Header>\n      <ListGroup variant=\"flush\">\n        <ListGroup.Item>Total amount of visitors: {viewTotal}</ListGroup.Item>\n        <ListGroup.Item>\n          <Badge pill variant=\"success\">\n            {usersAmount}\n          </Badge>{\" \"}\n          user{usersAmount > 1 ? \"s\" : \"\"}\n        </ListGroup.Item>\n        <ListGroup.Item>\n          <Badge pill variant=\"success\">\n            {woxComponentsAmount}\n          </Badge>{\" \"}\n          woxComponent{woxComponentsAmount > 1 ? \"s\" : \"\"}\n        </ListGroup.Item>\n        <ListGroup.Item>\n          <Badge pill variant=\"success\">\n            {pagesAmount}\n          </Badge>{\" \"}\n          page{pagesAmount > 1 ? \"s\" : \"\"}\n        </ListGroup.Item>\n      </ListGroup>\n    </Card>\n  );\n}\n","import React, { Component } from \"react\";\nimport TitleBoard from \"./titleBoard\";\nimport NewContentModal from \"./newContentModal\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport ContentTable from \"./contentTable\";\nimport Dashboard from \"./dashboard\";\n\n/* ------------------------------------------------------------------\n  This class desides what content has to be shown in each page, a page\n  is everything underneath the navbar\n  -------------------------------------------------------------------*/\nexport default class Page extends Component {\n  state = {\n    typeOfContent: \"woxComponent\",\n    currentObject: {},\n    modalShow: false\n  };\n\n  /* ------------------------------------------------------------------\n  when an object needs to get fetched from the database (for editing),\n  this happens here, the modalShow gets set to Edit because we are now\n  editing an object, the type of content gets set so the modal knows\n  what kind of form it needs to open.\n  -------------------------------------------------------------------*/\n  handleGetObjectFromDatabase = async objectId => {\n    const { axios } = this.props;\n    const responce = await axios.ConnectWithDatabase(\n      \"get\",\n      this.props.currentPage.typeOfData + \"/\" + objectId\n    );\n    this.setState({\n      modalShow: \"Edit\",\n      typeOfContent: this.props.currentPage.typeOfData,\n      currentObject: responce\n    });\n    return responce;\n  };\n\n  /* ------------------------------------------------------------------\n  self explanatory: gets an Id and removes it from the database. It also\n  refreshes the table of the page thats currently opened so the admin has\n  some visual feedback that the object has indeed been removed\n  -------------------------------------------------------------------*/\n  handleRemoveObjectFromDatabase = async objectId => {\n    const { axios, onRefreshTable } = this.props;\n    const responce = await axios.ConnectWithDatabase(\n      \"delete\",\n      this.props.currentPage.typeOfData + \"/\" + objectId\n    );\n    onRefreshTable();\n    return responce;\n  };\n\n  /* ------------------------------------------------------------------\n  puts the new data in the database in the object that corresponds to id\n  if there is no error while doing so it closes the modal and refreshes\n  the table. It also passes the responce so the modal in question can\n  display the error if neccesary\n  -------------------------------------------------------------------*/\n  handleEditObjectInDatabase = async (data, id, type) => {\n    const { axios, onRefreshTable } = this.props;\n    const responce = await axios.ConnectWithDatabase(\n      \"put\",\n      this.state.typeOfContent + \"/\" + id,\n      data\n    );\n    if (!responce.error) {\n      this.setState({ modalShow: false });\n      onRefreshTable();\n    }\n    return responce;\n  };\n\n  /* ------------------------------------------------------------------\n  adds new data to the database, the error handling works same as with\n  the edit\n  -------------------------------------------------------------------*/\n  handleAddObjectToDatabase = async (data, type) => {\n    const { axios, onRefreshTable } = this.props;\n    const responce = await axios.ConnectWithDatabase(\n      \"post\",\n      this.state.typeOfContent,\n      data\n    );\n    if (!responce.error) {\n      this.setState({ modalShow: false });\n      onRefreshTable();\n    }\n    return responce;\n  };\n\n  /* ------------------------------------------------------------------\n  when a new modal needs to get openend this gets called\n  -------------------------------------------------------------------*/\n  handleOpenNewModal = typeOfContent => {\n    this.setState({\n      modalShow: \"New\",\n      typeOfContent: typeOfContent\n    });\n  };\n\n  render() {\n    const containerStyle = {\n      marginTop: \"20px\"\n    };\n    const { currentPage, tableData } = this.props;\n    return (\n      <Container key={\"Container\"} style={containerStyle} fluid>\n        <NewContentModal\n          key={\"contentModal\"}\n          {...this.props}\n          lists={{\n            woxComponents: tableData.woxComponent,\n            layouts: tableData.layout,\n            pages: tableData.page\n          }}\n          show={this.state.modalShow}\n          typeOfContent={this.state.typeOfContent}\n          currentObject={this.state.currentObject}\n          onHide={() => this.setState({ modalShow: false })}\n          onAddNewContent={this.handleAddObjectToDatabase}\n          onEditContent={this.handleEditObjectInDatabase}\n          onGetContent={this.handleGetObjectFromDatabase}\n        />\n        <Row>\n          <Col>\n            <TitleBoard\n              {...this.props}\n              onAddNewContent={this.handleOpenNewModal}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col xl={12} lg={12} md={12} sm={12} xs={12}>\n            {currentPage.title === \"Dashboard\" ? (\n              <Dashboard\n                viewTotal={this.props.viewTotal}\n                user={this.props.axios.state.user}\n                pages={this.props.tableData.page}\n                woxComponents={this.props.tableData.woxComponent}\n                users={this.props.tableData.user}\n              />\n            ) : (\n              <ContentTable\n                {...this.props}\n                onRemoveContent={this.handleRemoveObjectFromDatabase}\n                onGetContent={this.handleGetObjectFromDatabase}\n                list={this.props.tableData[currentPage.typeOfData]}\n              />\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Form, Modal, Button, Alert } from \"react-bootstrap\";\n\n/* ------------------------------------------------------------------\n  the admin needs to log in before being able to do anything on the page,\n  when the credentials are incorrect. An alert is given back.\n  -------------------------------------------------------------------*/\nexport default class LoginModal extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n  state = {\n    email: \"admin@admin.be\",\n    password: \"password\",\n    showAlert: false\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    const { email, password } = this.state;\n    const { axios, onCorrectCredentials } = this.props;\n    const login = await axios.login(email, password);\n    if (login) onCorrectCredentials();\n    else this.setState({ showAlert: true });\n  };\n\n  handleInputChange(event) {\n    let target = event.currentTarget;\n    let value = target.value;\n    let name = target.name;\n    if (this.state.showAlert === true) this.setState({ showAlert: false });\n    this.setState({ [name]: value });\n  }\n  render() {\n    const { loggedIn } = this.props.axios.state;\n    return (\n      <Modal centered className={\"loginModal\"} show={!loggedIn}>\n        <Alert show={this.state.showAlert} key=\"incorrect\" variant=\"danger\">\n          Incorrect email or password!\n        </Alert>\n        <Modal.Body>\n          <div />\n          <Form onSubmit={this.handleSubmit}>\n            <Form.Group>\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                onChange={this.handleInputChange}\n                placeholder=\"admin@admin.be\"\n                defaultValue={this.state.email}\n                type=\"email\"\n                name=\"email\"\n              />\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                onChange={this.handleInputChange}\n                placeholder=\"password\"\n                defaultValue={this.state.password}\n                type=\"password\"\n                name=\"password\"\n              />\n            </Form.Group>\n            <Button type=\"submit\">Submit</Button>\n          </Form>\n        </Modal.Body>\n      </Modal>\n    );\n  }\n}\n","import axios from \"axios\";\n\n/* ------------------------------------------------------------------\nthe connection to the database. This also stores the information about\nthe currently logged in user\n-------------------------------------------------------------------*/\nexport default class AxiosConnection {\n  constructor(props) {\n    const development = false;\n    this.origin = new URL(document.URL).origin;\n    if (development) {\n      this.origin = \"http://localhost:3001\";\n    }\n  }\n\n  state = {\n    userRole: \"\",\n    loggedIn: false,\n    user: \"\",\n    config: {}\n  };\n  logOut() {\n    this.state.loggedIn = false;\n    this.state.config = {};\n  }\n\n  /* ------------------------------------------------------------------\n  when a user logs in, their credentials get checked. If they are correct\n  their username, and role get saved for later use. The token gets inserted\n  in the headers so when we later want to ask something to the database\n  this is already set.\n  -------------------------------------------------------------------*/\n  login = async (email, password) => {\n    const userToken = await axios.post(this.origin + \"/v1/api/login\", {\n      email: email,\n      password: password\n    });\n    if (userToken.data.error) return false;\n    else {\n      this.state.config = { headers: { \"auth-token\": userToken.data.token } };\n      this.state.loggedIn = true;\n      this.state.user = userToken.data.name;\n      this.state.userRole = userToken.data.role;\n      return true;\n    }\n  };\n\n  /* ------------------------------------------------------------------\n  check whether the user has the privileges to manipulate this type of Data\n  -------------------------------------------------------------------*/\n  disabled(typeOfData) {\n    if (this.state.userRole === \"admin\") return false;\n    if (this.state.userRole === \"editor\") {\n      switch (typeOfData) {\n        case \"user\":\n        case \"layout\":\n          return true;\n        default:\n          return false;\n      }\n    }\n  }\n\n  /* ------------------------------------------------------------------\n  uploads a picture to the database. The headers need to also contain\n  the content-type: multipart/form-data for this to work.\n  -------------------------------------------------------------------*/\n  uploadPicture = async (connectType, options) => {\n    const url = this.origin + \"/v1/api/image\";\n    let config = { ...this.state.config };\n    config.headers = {\n      \"content-type\": `multipart/form-data`,\n      ...config.headers\n    };\n    let responce = await axios.post(url, options, config);\n    if (responce.data.error)\n      console.log(\"=== BACKEND ERROR ===\", responce.data.error);\n    return responce.data;\n  };\n\n  /* ------------------------------------------------------------------\n  performs the correct manipulation to the database\n  -------------------------------------------------------------------*/\n  ConnectWithDatabase = async (connectType, url, options) => {\n    url = this.origin + \"/v1/api/\" + url;\n    let { config } = this.state;\n    const typeFunction = () => {\n      switch (connectType) {\n        case \"get\":\n          let Config = {\n            params: { filters: options ? options : {} },\n            ...config\n          };\n          return axios.get(url, Config);\n        case \"put\":\n          return axios.put(url, options, config);\n        case \"post\":\n          return axios.post(url, options, config);\n        case \"delete\":\n          return axios.delete(url, config);\n        default:\n          return null;\n      }\n    };\n    let responce = await typeFunction();\n    if (responce.data.error)\n      console.log(\"=== BACKEND ERROR ===\", responce.data.error);\n    return responce.data;\n  };\n}\n","import React, { Component } from \"react\";\nimport Navigation from \"./components/navigation\";\nimport Page from \"./components/page\";\nimport LoginModal from \"./components/loginModal\";\nimport AxiosConnection from \"./components/connectWithDatabase\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.setDestinationIndex = this.setDestinationIndex.bind(this);\n  }\n  state = {\n    destinationIndex: 0,\n    loggedIn: false,\n    viewTotal: 0,\n    tableData: {},\n    axios: new AxiosConnection()\n  };\n\n  /* ------------------------------------------------------------------\n  fetches the amount of page requests, this is called only once when \n  the admin logs in. This is used for display in the dashboard\n  -------------------------------------------------------------------*/\n  fetchViewTotal = async () => {\n    const { axios } = this.state;\n    const views = await axios.ConnectWithDatabase(\"get\", \"requestcounter\");\n    this.setState({ viewTotal: views.counter });\n  };\n\n  /* ------------------------------------------------------------------\n  this is called only once when the admin is correctly loged in\n  -------------------------------------------------------------------*/\n  fetchAllTables() {\n    const { destinations } = this.props;\n    //we start at 1 because there is no data for index 0 (Dashboard)\n    for (let i = 1; i < destinations.length; i++)\n      this.handleRefreshTableData(i);\n  }\n\n  /* ------------------------------------------------------------------\n  when a new \"page\" is opened this actually just means the destinationIndex\n  is changed so the site knows what content has to be shown. When this\n  happens we also refresh the table Data so it keeps up to date.\n  -------------------------------------------------------------------*/\n  setDestinationIndex = async index => {\n    if (this.props.destinations[index].typeOfData !== \"noData\")\n      await this.handleRefreshTableData(index);\n    this.setState({ destinationIndex: index });\n  };\n\n  /* ------------------------------------------------------------------\n  refreshes the content in a table by fetching it from the database,\n  it knows what filters it has to use by getting the tableColumns\n  of the given destination(content Type) and addind Id and description\n  -------------------------------------------------------------------*/\n  handleRefreshTableData = async index => {\n    const { destinations } = this.props;\n    const { axios, tableData } = this.state;\n    if (destinations[index].typeOfData !== \"noData\") {\n      let filters = [\n        ...destinations[index].tableColumns.map(column => column.dataField),\n        \"id\",\n        \"description\"\n      ];\n      const newTableData = await axios.ConnectWithDatabase(\n        \"get\",\n        destinations[index].typeOfData,\n        { col_filters: filters }\n      );\n      tableData[destinations[index].typeOfData] = newTableData;\n      this.setState({ tableData: tableData });\n    }\n  };\n\n  render() {\n    const { axios, destinationIndex: index, tableData } = this.state;\n    return (\n      <React.Fragment>\n        <LoginModal\n          key={\"loginModal\"}\n          onCorrectCredentials={() => {\n            this.fetchViewTotal();\n            this.fetchAllTables();\n            this.setState({ loggedIn: true });\n          }}\n          axios={this.state.axios}\n        />\n        <Navigation\n          {...this.props}\n          axios={axios}\n          destinationIndex={index}\n          setDestinationIndex={this.setDestinationIndex}\n        />\n        <Page\n          {...this.props}\n          axios={this.state.axios}\n          viewTotal={this.state.viewTotal}\n          onRefreshTable={() => this.handleRefreshTableData(index)}\n          tableData={tableData}\n          currentPage={this.props.destinations[index]}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport App from \"./App\";\nimport \"./components/style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"react-bootstrap-table/dist/react-bootstrap-table-all.min.css\";\n\nconst DESTINATIONS = [\n  /* --------------------------------------------------------------------------------------------------------\n  for every type of editable content that the admins are able to edit, we keep its \n    - title: Whats it called in the navbar and titlebar\n    - typeOfData: this correlates exactly to how the data is stored in the database/backend\n    - tableColumns: wich data needs to gets fetched to put in the tables \n    - newContent: how the form to handle edits to new or old components of this type looks like.\n                  this relates to a react-bootstrap form for most entries but there are some exceptions,\n                  these are handled when the form Component is Created\n  ----------------------------------------------------------------------------------------------------------*/\n\n  {\n    title: \"Dashboard\",\n    typeOfData: \"noData\"\n  },\n  {\n    title: \"Pages\",\n    typeOfData: \"page\",\n    tableColumns: [\n      { dataField: \"title\", text: \"title\", sort: true },\n      { dataField: \"editor\", text: \"editor\", sort: true },\n      { dataField: \"published\", text: \"published\", sort: true },\n      { dataField: \"date\", text: \"date\", sort: true }\n    ],\n    newContent: [\n      {\n        group: true,\n        groupElements: [\n          {\n            formType: \"Control\",\n            inputType: \"text\",\n            label: \"Title\",\n            key: \"title\"\n          },\n          {\n            formType: \"select\",\n            inputType: \"text\",\n            label: \"Layout\",\n            key: \"layout\",\n            options: \"layouts\"\n          },\n          {\n            mdSize: 1.5,\n            formType: \"select\",\n            label: \"published\",\n            key: \"published\",\n            options: [\n              { value: 1, label: \"✅\" },\n              { value: 0, label: \"❌\" }\n            ]\n          }\n        ]\n      },\n      {\n        formType: \"multipleselect\",\n        inputType: \"text\",\n        contentType: \"special\",\n        label: \"Components\",\n        key: \"comps\",\n        options: \"woxComponents\"\n      },\n      {\n        formType: \"Control\",\n        prependUrl: true,\n        inputType: \"text\",\n        label: \"Url\",\n        key: \"url\"\n      },\n      {\n        formType: \"Control\",\n        inputType: \"text\",\n        label: \"Description\",\n        key: \"description\"\n      }\n    ]\n  },\n  {\n    title: \"WoxComponents\",\n    typeOfData: \"woxComponent\",\n    tableColumns: [\n      { dataField: \"title\", text: \"title\", sort: true },\n      { dataField: \"editor\", text: \"editor\", sort: true },\n      { dataField: \"date\", text: \"date\", sort: true }\n    ],\n    newContent: [\n      {\n        group: true,\n        groupElements: [\n          {\n            formType: \"Control\",\n            inputType: \"text\",\n            label: \"Title\",\n            key: \"title\"\n          },\n          {\n            mdSize: 2,\n            formType: \"select\",\n            label: \"Type\",\n            key: \"type\",\n            options: [\n              { value: \"text\", label: \"text\" },\n              { value: \"carousel\", label: \"carousel\" },\n              { value: \"container\", label: \"container\" },\n              { value: \"button\", label: \"button\" },\n              { value: \"clickablePicture\", label: \"clickablePicture\" },\n              { value: \"pictureFolder\", label: \"pictureFolder\" }\n            ]\n          },\n          {\n            mdSize: 1.5,\n            formType: \"select\",\n            label: \"Comments?\",\n            key: \"commentable\",\n            options: [\n              { value: 0, label: \"❌\" },\n              { value: 1, label: \"✅\" }\n            ]\n          }\n        ]\n      },\n      {\n        formType: \"textarea\",\n        contentType: \"object\",\n        inputType: \"text\",\n        label: \"Content\",\n        key: \"content\"\n      },\n      {\n        formType: \"Control\",\n        inputType: \"text\",\n        label: \"Description\",\n        key: \"description\"\n      }\n    ]\n  },\n  {\n    title: \"Users\",\n    typeOfData: \"user\",\n    tableColumns: [\n      { dataField: \"name\", text: \"name\", sort: true },\n      { dataField: \"email\", text: \"email\", sort: true },\n      { dataField: \"role\", text: \"role\", sort: true },\n      { dataField: \"date\", text: \"date\", sort: true }\n    ],\n    newContent: [\n      {\n        group: true,\n        groupElements: [\n          {\n            formType: \"Control\",\n            inputType: \"text\",\n            label: \"Name\",\n            key: \"name\"\n          },\n          {\n            formType: \"Control\",\n            inputType: \"password\",\n            label: \"Password\",\n            key: \"password\"\n          },\n          {\n            formType: \"select\",\n            inputType: \"role\",\n            label: \"Role\",\n            key: \"role\",\n            options: [\n              { value: \"editor\", label: \"editor\" },\n              { value: \"admin\", label: \"admin\" }\n            ]\n          }\n        ]\n      },\n      {\n        formType: \"normal\",\n        inputType: \"email\",\n        label: \"Email\",\n        key: \"email\"\n      }\n    ]\n  },\n  {\n    title: \"Layout-Editor\",\n    typeOfData: \"layout\",\n    tableColumns: [\n      { dataField: \"title\", text: \"title\", sort: true },\n      { dataField: \"editor\", text: \"editor\", sort: true },\n      { dataField: \"date\", text: \"date\", sort: true }\n    ],\n    newContent: [\n      {\n        group: true,\n        groupElements: [\n          {\n            formType: \"normal\",\n            inputType: \"text\",\n            label: \"Title\",\n            key: \"title\"\n          },\n          {\n            mdSize: 2,\n            formType: \"select\",\n            label: \"columnType\",\n            key: \"columnType\",\n            options: [\n              { value: \"single\", label: \"███████\" },\n              { value: \"small-left\", label: \"██ ████\" },\n              { value: \"small-right\", label: \"████ ██\" },\n              { value: \"triple\", label: \"█ ███ █\" }\n            ]\n          }\n        ]\n      },\n      {\n        group: true,\n        groupElements: [\n          {\n            mdSize: 1.5,\n            formType: \"select\",\n            label: \"Icon\",\n            key: \"customIcon\",\n            options: [\n              { value: 1, label: \"✅\" },\n              { value: 0, label: \"❌\" }\n            ]\n          },\n          {\n            formType: \"picture\",\n            key: \"iconId\"\n          },\n          {\n            mdSize: 2,\n            label: \"backgroundcolor\",\n            key: \"backgroundColor\"\n          }\n        ]\n      },\n      {\n        group: true,\n        groupElements: [\n          {\n            mdSize: 1.5,\n            formType: \"select\",\n            label: \"navbar\",\n            key: \"navbar\",\n            options: [\n              { value: 1, label: \"✅\" },\n              { value: 0, label: \"❌\" }\n            ]\n          },\n          {\n            mdSize: 4,\n            formType: \"normal\",\n            inputType: \"text\",\n            label: \"Brand\",\n            key: \"brand\"\n          },\n          {\n            formType: \"multiselect\",\n            contentType: \"object\",\n            label: \"links\",\n            key: \"navcontent\",\n            options: \"pages\"\n          }\n        ]\n      },\n      {\n        group: true,\n        groupElements: [\n          {\n            mdSize: 1.5,\n            formType: \"select\",\n            label: \"footer\",\n            key: \"footer\",\n            options: [\n              { value: 1, label: \"✅\" },\n              { value: 0, label: \"❌\" }\n            ]\n          },\n          {\n            formType: \"normal\",\n            inputType: \"text\",\n            label: \"footcontent\",\n            key: \"footcontent\"\n          }\n        ]\n      },\n      {\n        formType: \"Control\",\n        inputType: \"text\",\n        label: \"Description\",\n        key: \"description\"\n      }\n    ]\n  }\n];\n\nReactDOM.render(\n  <App key=\"app\" destinations={DESTINATIONS} />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}